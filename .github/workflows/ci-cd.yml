name: Simple CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  pipeline:
    runs-on: [self-hosted]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y \
          python3 python3-pip \
          wget unzip curl \
          docker.io \
          openjdk-21-jdk
        
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        
        # Docker DinD service'e bağlan
        export DOCKER_HOST=tcp://docker-dind:2376
        echo "DOCKER_HOST=tcp://docker-dind:2376" >> $GITHUB_ENV
        
        # Remove conflicting Java versions
        apt-get remove -y --purge openjdk-8-* openjdk-11-* openjdk-17-* || true
        
        # Set Java 21
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        echo "JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-21-openjdk-amd64/bin" >> $GITHUB_PATH
        
        # Docker daemon ready kontrolü
        echo "Waiting for Docker daemon..."
        for i in {1..30}; do
          if docker info >/dev/null 2>&1; then
            echo "Docker daemon is ready!"
            break
          fi
          echo "Waiting for Docker daemon... ($i/30)"
          sleep 3
        done
        
        # Test Docker
        docker ps
        
        # Verify installations
        echo "=== CLI Versions ==="
        python --version
        pip --version
        java -version
        docker --version
        wget --version | head -1
        curl --version | head -1
        echo "===================="
    
    - name: Unit Tests & Coverage
      run: |
        cd codebase
        pip install -r requirements.txt pytest pytest-cov
        python -m pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-fail-under=50 \
          -v
    
    - name: SonarQube Static Code Analysis
      run: |
        cd codebase
        
        # Ensure Java 21 (SonarQube server ile aynı)
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        export PATH=/usr/lib/jvm/java-21-openjdk-amd64/bin:$PATH
        
        echo "Java verification:"
        java -version
        echo "JAVA_HOME: $JAVA_HOME"
        
        # SonarQube'da token oluştur
        echo "Creating SonarQube token..."
        TOKEN=$(curl -u admin:admin -X POST \
          "http://sonarqube:9000/api/user_tokens/generate" \
          -d "name=pipeline-token-$(date +%s)" | \
          python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "")
        
        if [ -z "$TOKEN" ]; then
          echo "Failed to create token, trying existing token..."
          TOKEN="admin"
        fi
        
        echo "Using token: ${TOKEN:0:10}..."
        
        # Download latest SonarQube Scanner (Java 21 uyumlu)
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        
        # Run SonarQube analysis with Java 21
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 \
        ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner \
          -Dsonar.projectKey=auth-service \
          -Dsonar.projectName="Authentication Service" \
          -Dsonar.sources=. \
          -Dsonar.exclusions="tests/**,**/__pycache__/**" \
          -Dsonar.host.url=http://sonarqube:9000 \
          -Dsonar.token="$TOKEN" \
          -Dsonar.python.coverage.reportPaths=coverage.xml
        
        echo "✅ SonarQube analysis completed!"
    
    - name: Build Docker Image
      run: |
        cd codebase
        
        # DinD servisini kullan
        export DOCKER_HOST=tcp://docker-dind:2376
        
        # Docker build
        docker build -t auth-service:latest .
        
        # Image kontrolü
        docker images | grep auth-service
    
    - name: Container Security Scan
      run: |
        export DOCKER_HOST=tcp://docker-dind:2376
        trivy image \
          --server http://trivy-server:4954 \
          --severity CRITICAL \
          --exit-code 1 \
          auth-service:latest
    
    - name: Load Test
      run: |
        curl -X POST http://locust-master:8089/swarm \
          -d "user_count=10&spawn_rate=2&host=http://auth-service:5000" || true
        sleep 30
        curl -X GET http://locust-master:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd codebase
        
        export DOCKER_HOST=tcp://docker-dind:2376
        
        # ECR Login
        aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        
        # Tag and Push
        docker tag auth-service:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/auth-service:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/auth-service:latest
        
    - name: Deploy to Kubernetes
      run: |
        cd codebase
        
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Configure kubectl for EKS
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        
        # Update deployment with new image
        kubectl set image deployment/auth-service auth-service=708778582346.dkr.ecr.us-east-1.amazonaws.com/auth-service:latest -n authentication
        
        # Wait for rollout
        kubectl rollout status deployment/auth-service -n authentication --timeout=300s
        
        # Verify deployment
        kubectl get pods -n authentication
        
        echo "✅ Deployed to Kubernetes successfully!"
